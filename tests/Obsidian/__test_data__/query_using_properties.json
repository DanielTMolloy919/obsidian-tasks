{
  "cachedMetadata": {
    "frontmatter": {
      "root_dirs_to_search": [
        "Formats/",
        "Filters/"
      ],
      "task_instruction": "group by filename",
      "task_instructions": "group by root\ngroup by folder\n  group by filename\n# a comment\n"
    },
    "frontmatterLinks": [],
    "frontmatterPosition": {
      "end": {
        "col": 3,
        "line": 10,
        "offset": 181
      },
      "start": {
        "col": 0,
        "line": 0,
        "offset": 0
      }
    },
    "headings": [
      {
        "heading": "query_using_properties",
        "level": 1,
        "position": {
          "end": {
            "col": 24,
            "line": 12,
            "offset": 207
          },
          "start": {
            "col": 0,
            "line": 12,
            "offset": 183
          }
        }
      },
      {
        "heading": "Use a one-line property: task_instruction",
        "level": 2,
        "position": {
          "end": {
            "col": 44,
            "line": 16,
            "offset": 299
          },
          "start": {
            "col": 0,
            "line": 16,
            "offset": 255
          }
        }
      },
      {
        "heading": "Use a multi-line property: task_instructions",
        "level": 2,
        "position": {
          "end": {
            "col": 47,
            "line": 27,
            "offset": 553
          },
          "start": {
            "col": 0,
            "line": 27,
            "offset": 506
          }
        }
      },
      {
        "heading": "Use a list property in a custom filter: root_dirs_to_search",
        "level": 2,
        "position": {
          "end": {
            "col": 62,
            "line": 39,
            "offset": 859
          },
          "start": {
            "col": 0,
            "line": 39,
            "offset": 797
          }
        }
      }
    ],
    "listItems": [
      {
        "parent": -14,
        "position": {
          "end": {
            "col": 44,
            "line": 14,
            "offset": 253
          },
          "start": {
            "col": 0,
            "line": 14,
            "offset": 209
          }
        },
        "task": " "
      }
    ],
    "sections": [
      {
        "position": {
          "end": {
            "col": 3,
            "line": 10,
            "offset": 181
          },
          "start": {
            "col": 0,
            "line": 0,
            "offset": 0
          }
        },
        "type": "yaml"
      },
      {
        "position": {
          "end": {
            "col": 24,
            "line": 12,
            "offset": 207
          },
          "start": {
            "col": 0,
            "line": 12,
            "offset": 183
          }
        },
        "type": "heading"
      },
      {
        "position": {
          "end": {
            "col": 44,
            "line": 14,
            "offset": 253
          },
          "start": {
            "col": 0,
            "line": 14,
            "offset": 209
          }
        },
        "type": "list"
      },
      {
        "position": {
          "end": {
            "col": 44,
            "line": 16,
            "offset": 299
          },
          "start": {
            "col": 0,
            "line": 16,
            "offset": 255
          }
        },
        "type": "heading"
      },
      {
        "position": {
          "end": {
            "col": 108,
            "line": 18,
            "offset": 409
          },
          "start": {
            "col": 0,
            "line": 18,
            "offset": 301
          }
        },
        "type": "paragraph"
      },
      {
        "position": {
          "end": {
            "col": 3,
            "line": 25,
            "offset": 504
          },
          "start": {
            "col": 0,
            "line": 20,
            "offset": 411
          }
        },
        "type": "code"
      },
      {
        "position": {
          "end": {
            "col": 47,
            "line": 27,
            "offset": 553
          },
          "start": {
            "col": 0,
            "line": 27,
            "offset": 506
          }
        },
        "type": "heading"
      },
      {
        "position": {
          "end": {
            "col": 118,
            "line": 29,
            "offset": 673
          },
          "start": {
            "col": 0,
            "line": 29,
            "offset": 555
          }
        },
        "type": "paragraph"
      },
      {
        "position": {
          "end": {
            "col": 3,
            "line": 37,
            "offset": 795
          },
          "start": {
            "col": 0,
            "line": 31,
            "offset": 675
          }
        },
        "type": "code"
      },
      {
        "position": {
          "end": {
            "col": 62,
            "line": 39,
            "offset": 859
          },
          "start": {
            "col": 0,
            "line": 39,
            "offset": 797
          }
        },
        "type": "heading"
      },
      {
        "position": {
          "end": {
            "col": 3,
            "line": 54,
            "offset": 1247
          },
          "start": {
            "col": 0,
            "line": 41,
            "offset": 861
          }
        },
        "type": "code"
      }
    ],
    "tags": [
      {
        "position": {
          "end": {
            "col": 11,
            "line": 14,
            "offset": 220
          },
          "start": {
            "col": 6,
            "line": 14,
            "offset": 215
          }
        },
        "tag": "#task"
      }
    ]
  },
  "fileContents": "---\nroot_dirs_to_search:\n  - Formats/\n  - Filters/\ntask_instruction: group by filename\ntask_instructions: |\n  group by root\n  group by folder\n    group by filename\n  # a comment\n---\n\n# query_using_properties\n\n- [ ] #task Task in 'query_using_properties'\n\n## Use a one-line property: task_instruction\n\nRead a Tasks instruction from a property in this file, and embed it in to any number of queries in the file:\n\n```tasks\nexplain\nignore global query\n{{query.file.property('task_instruction')}}\nlimit 10\n```\n\n## Use a multi-line property: task_instructions\n\nRead multiple Tasks instructions from a property in this file, and embed them in to any number of queries in the file:\n\n```tasks\nignore global query\nfolder includes Test Data\nexplain\n{{query.file.property('task_instructions')}}\nlimit 10\n```\n\n## Use a list property in a custom filter: root_dirs_to_search\n\n```tasks\nignore global query\nexplain\n\nfilter by function \\\n    if (!query.file.hasProperty('root_dirs_to_search')) { \\\n        throw Error('Please set the \"root_dirs_to_search\" list property, with each value ending in a backslash...'); \\\n    } \\\n    const roots = query.file.property('root_dirs_to_search'); \\\n    return roots.includes(task.file.root);\n\nlimit groups 5\ngroup by root\n```\n",
  "filePath": "Test Data/query_using_properties.md",
  "getAllTags": [
    "#task"
  ],
  "obsidianApiVersion": "1.7.7",
  "parseFrontMatterTags": null
}